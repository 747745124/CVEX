- name: Windows
  hosts: all
  tasks:
    # https://docs.ansible.com/ansible/latest/os_guide/windows_performance.html
    - name: Optimize PowerShell startup
      ansible.windows.win_shell: |
        function Optimize-Assemblies {
            param (
                [string]$assemblyFilter = "Microsoft.PowerShell.",
                [string]$activity = "Native Image Installation"
            )

            try {
                # Get the path to the ngen executable dynamically
                $ngenPath = [System.IO.Path]::Combine([Runtime.InteropServices.RuntimeEnvironment]::GetRuntimeDirectory(), "ngen.exe")

                # Check if ngen.exe exists
                if (-Not (Test-Path $ngenPath)) {
                    Write-Host "Ngen.exe not found at $ngenPath. Make sure .NET Framework is installed."
                    return
                }

                # Get a list of loaded assemblies
                $assemblies = [AppDomain]::CurrentDomain.GetAssemblies()

                # Filter assemblies based on the provided filter
                $filteredAssemblies = $assemblies | Where-Object { $_.FullName -ilike "$assemblyFilter*" }

                if ($filteredAssemblies.Count -eq 0) {
                    Write-Host "No matching assemblies found for optimization."
                    return
                }

                foreach ($assembly in $filteredAssemblies) {
                    # Get the name of the assembly
                    $name = [System.IO.Path]::GetFileName($assembly.Location)

                    # Display progress
                    Write-Progress -Activity $activity -Status "Optimizing $name"

                    # Use Ngen to install the assembly
                    Start-Process -FilePath $ngenPath -ArgumentList "install `"$($assembly.Location)`"" -Wait -WindowStyle Hidden
                }

                Write-Host "Optimization complete."
            } catch {
                Write-Host "An error occurred: $_"
            }
        }

        # Optimize PowerShell assemblies:
        Optimize-Assemblies -assemblyFilter "Microsoft.PowerShell."
    - name: Create C:\Tools
      ansible.windows.win_file:
        path: C:\Tools
        state: directory
    - name: Download Process Monitor
      ansible.builtin.win_get_url:
        url: https://download.sysinternals.com/files/ProcessMonitor.zip
        dest: C:/Tools/ProcessMonitor.zip
    - name: Unzip ProcessMonitor.zip
      community.windows.win_unzip:
        src: C:/Tools/ProcessMonitor.zip
        dest: C:/Tools
        delete_archive: yes
    - name: Copy mitmproxy-ca-cert.cer
      ansible.builtin.copy:
        src: ~/.cvex/router/mitmproxy-ca-cert.cer
        dest: C:/Tools
    - name: Install mitmproxy-ca-cert.cer
      ansible.builtin.win_shell: Import-Certificate -FilePath 'C:\Tools\mitmproxy-ca-cert.cer' -CertStoreLocation Cert:\LocalMachine\Root
    - name: Copy root.crl
      ansible.builtin.copy:
        src: ~/.cvex/router/root.crl
        dest: C:/Tools
    - name: Install root.crl
      ansible.builtin.win_command: certutil -addstore CA C:\Tools\root.crl
